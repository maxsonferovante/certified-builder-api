name: Gerenciamento de Tags, Releases e Deploy

on:
  push:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Permite execução manual do workflow

permissions:
  contents: write  # Concede permissão explícita para criar tags e releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configurar Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Criar e enviar tag de versão
        id: create-tag
        run: |
          # Obtém a data atual no formato YYYYMMDD
          DATE_VERSION=$(date +'%Y%m%d')
          # Conta quantas tags existem com o prefixo da data atual
          TAG_COUNT=$(git tag -l "v${DATE_VERSION}.*" | wc -l)
          # Incrementa o contador para a nova tag
          TAG_COUNT=$((TAG_COUNT + 1))
          # Cria o nome da nova tag
          NEW_TAG="v${DATE_VERSION}.${TAG_COUNT}"
          # Cria a tag localmente
          git tag -a ${NEW_TAG} -m "Release ${NEW_TAG}"
          # Envia a tag para o repositório remoto
          git push origin ${NEW_TAG}
          echo "Nova tag criada: ${NEW_TAG}"
          echo "tag=${NEW_TAG}" >> $GITHUB_OUTPUT
      
      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-tag.outputs.tag }}
          name: "Release ${{ steps.create-tag.outputs.tag }}"
          body: |
            ## Release Notes
            
            Esta release foi gerada automaticamente após alterações na branch main.
            
            ### Últimos Commits:
            ${{ github.event.head_commit.message }}
            
            ### Autor:
            ${{ github.event.head_commit.author.name }}
            
            ### Data:
            ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Criar chave SSH
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Deploy via SSH na EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Entrar na pasta do app
            cd ~/certified-builder-api
            
            # Fazer pull do repositório
            git pull origin main

            echo "Criando acme.json com permissão correta..."
            mkdir -p ./letsencrypt
            touch ./letsencrypt/acme.json
            chmod 600 ./letsencrypt/acme.json

            # Passar variáveis diretamente no comando docker
            MONGO_URI=${{ secrets.MONGO_URI }} \
            URL_SERVICE_TECH=${{ secrets.URL_SERVICE_TECH }} \
            API_KEY=${{ secrets.API_KEY }} \
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            AWS_REGION=${{ secrets.AWS_REGION }} \
            QUEUE_NAME_NOTIFICATION_GENERATION=${{ secrets.QUEUE_NAME_NOTIFICATION_GENERATION }} \
            QUEUE_NAME_BUILDER=${{ secrets.QUEUE_NAME_BUILDER }} \
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }} \
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} \
            # Subir containers
            docker compose -f docker-compose.prod.yml up -d --build
          EOF