name: Fluxo de Pull Request

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:  # Permite execução manual do workflow

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    services:
      localstack:
        image: localstack/localstack
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs,dynamodb
          DEBUG: 1
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          DATA_DIR: /tmp/localstack/data
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for LocalStack to be ready
        run: |
          while ! curl -s http://localhost:4566/_localstack/health | grep -q '"dynamodb": "available"'; do
            echo "Waiting for LocalStack DynamoDB to be ready..."
            sleep 2
          done
          while ! curl -s http://localhost:4566/_localstack/health | grep -q '"sqs": "available"'; do
            echo "Waiting for LocalStack SQS to be ready..."
            sleep 2
          done

      - name: Configure AWS services
        run: |
          # Instalar awslocal
          pip install awscli-local
          
          # Criar filas SQS
          awslocal sqs create-queue --queue-name builder.fifo --attributes FifoQueue=true
          awslocal sqs create-queue --queue-name notification_generation.fifo --attributes FifoQueue=true
          
          # Criar bucket S3
          awslocal s3api create-bucket --bucket maal-upload-dev
          
          # Criar tabelas DynamoDB
          awslocal dynamodb create-table \
            --table-name certificates \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
          
          awslocal dynamodb create-table \
            --table-name orders \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
          
          awslocal dynamodb create-table \
            --table-name participants \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
          
          awslocal dynamodb create-table \
            --table-name products \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST

      - name: Validate DynamoDB tables
        run: |
          echo "Validating DynamoDB tables creation..."
          awslocal dynamodb list-tables
          awslocal dynamodb describe-table --table-name certificates
          awslocal dynamodb describe-table --table-name orders
          awslocal dynamodb describe-table --table-name participants
          awslocal dynamodb describe-table --table-name products
          echo "All DynamoDB tables created successfully!"

      - name: Clean Build Cache
        run: ./gradlew clean build --refresh-dependencies

      - name: Run Tests (isolados dos serviços AWS)
        run: ./gradlew test --stacktrace --info
        env:
          # Força o perfil de teste para garantir isolamento completo
          SPRING_PROFILES_ACTIVE: test

      - name: Build Application (sem testes)
        run: ./gradlew build -x test --stacktrace --info
        env:
          SPRING_URL_SERVICE_TECH: ${{secrets.URL_SERVICE_TECH}}
          
          # AWS LocalStack Configuration
          SPRING_CLOUD_AWS_ENDPOINT: http://localhost:4566
          SPRING_CLOUD_AWS_CREDENTIALS_ACCESSKEY: test
          SPRING_CLOUD_AWS_CREDENTIALS_SECRETKEY: test
          SPRING_CLOUD_AWS_REGION_STATIC: us-east-1
          SPRING_CLOUD_AWS_REGION_AUTO: false
          
          # DynamoDB Configuration
          AMAZON_DYNAMODB_ENDPOINT: http://localhost:4566
          AWS_ACCESSKEYID: test
          AWS_SECRETACCESSKEY: test
          AWS_REGION: us-east-1
          
          # SQS Configuration
          SPRING_CLOUD_AWS_QUEUE_NAME_NOTIFICATION_GENERATION: notification_generation.fifo
          SPRING_CLOUD_AWS_SQS_QUEUE_NAME: builder.fifo
          
          # S3 Configuration
          SPRING_CLOUD_AWS_S3_BUCKET_NAME: maal-upload-dev
          SPRING_CLOUD_AWS_S3_ENDPOINT: http://localhost:4566
          SPRING_CLOUD_AWS_S3_PATH_STYLE_ACCESS: true
